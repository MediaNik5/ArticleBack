openapi: 3.0.3
info:
  title: Swagger Article web-service - OpenAPI 3.0
  description: |-
    This is documentation for article web-service
  version: 1.0.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://comgrid.ru/article-api
tags:
  - name: articles
    description: Everything about articles
  - name: users
    description: Everything about users
  - name: article-statistics
    description: Everything about statistics
paths:
  /articles:
    post:
      tags:
        - articles
      summary: Create new article
      description:
        Create new article. Only available for authorized users.
      operationId: createArticle
      requestBody:
        description: Create new article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewArticleRequest'
        required: true
      responses:
        '200':
          description: Article is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
        '400':
          description: Invalid request body
        '405':
          description: Validation exception
      security:
        - bearerAuth: [ ]
    get:
      tags:
        - articles
      summary: Get all articles
      description:
        Get all articles, that are available to current user, including private and custom ones.
        If current user is not authorized, returns all public articles.
        You might specify creatorId, dateFrom, dateTo, sortBy, page, size,
        sortDirection clauses to specify articles.
      operationId: getAllArticles
      parameters:
        - in: query
          name: creatorId
          schema:
            type: string
        - in: query
          name: dateFromMillis
          schema:
            type: integer
            format: int64
        - in: query
          name: dateToMillis
          schema:
            type: integer
            format: int64
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - TITLE
              - CREATED
              - UPDATED
          required: false
        - in: query
          name: sortDirection
          schema:
            type: string
            enum:
              - ASC
              - DESC
          required: false
        - in: query
          name: page
          schema:
            type: integer
            format: int32
          required: false
        - in: query
          name: size
          schema:
            type: integer
            format: int32
          required: false
      responses:
        '200':
          description: Articles are retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesResponse'
        '400':
          description: Invalid request body
  /articles/{articleId}:
    get:
      tags:
        - articles
      summary: Get article by id
      description:
        Get article by id. If article is not owned by current user and 
        current user does not have access to this article(either article is private
        or custom and list of users does not contain current user), then 
        404 NOT FOUND is returned
      operationId: getArticleById
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Article is retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
        '400':
          description: Invalid article id
        '404':
          description:
            Requested article is not found. It might be the case when current
            user does not have access to this article.
    put:
      tags:
        - articles
      summary: Update article
      description: Update given article. Available only for article creator.
      operationId: updateArticle
      requestBody:
        description: Update article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
        required: true
      responses:
        '200':
          description: Article is updated successfully
        '400':
          description: Invalid request body
        '404':
          description:
            Article not found. It might be also the case, when current user
            does not have access to this article
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - articles
      summary: Delete article
      description: Delete article. Only available for the author of article
      operationId: deleteArticle
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Article is deleted successfully
        '400':
          description: Invalid article id
        '404':
          description: Requested article is not found
      security:
        - bearerAuth: [ ]
  /articles/{articleId}/access:
    put:
      tags:
        - articles
      summary: Update article access
      description: Update article access. Available only for article author.
      operationId: updateArticleAccess
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: Update article access
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleAccessRequest'
        required: true
      responses:
        '200':
          description: Article access is updated successfully
        '400':
          description: Invalid request body
        '404':
          description:
            Article not found. It might be the case when current user does not
            have access to this article
      security:
        - bearerAuth: [ ]
  /articles-statistics/{articleId}/read-progress-self:
    get:
      tags:
        - article-statistics
      summary: Get read progress for current user
      description: Get read progress for current user
      operationId: getReadProgressForCurrentUser
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Article statistics are retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleReadProgressResponse'
        '400':
          description: Invalid request
        '404':
          description:
            Requested article is not found. It might be the case when current user does not
            have access to this article
      security:
        - bearerAuth: [ ]

  /articles-statistics/{articleId}/read-progress:
    get:
      tags:
        - article-statistics
      summary: Get article read progresses
      description: Get article read progresses. Available only to article author.
      operationId: getArticleReadProgress
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
        - in: query
          name: includeEach
          description: |
            Include each read progress from every user that has opened the article
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Article statistics are retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleReadProgressesResponse'
        '400':
          description: Invalid request
        '404':
          description:
            Requested article is not found. It might be the case when current user does not
            have access to this article
      security:
        - bearerAuth: [ ]
    post:
      tags:
        - article-statistics
      summary: Set read progress
      description: Set read progress
      operationId: addReadProgress
      requestBody:
        description: Set read progress
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleReadProgressRequest'
        required: true
      responses:
        '200':
          description: Successfully saved read progress
        '400':
          description: Invalid request
        '404':
          description: Requested article is not found
      security:
        - bearerAuth: [ ]
  /articles-statistics/{articleId}/reactions:
    get:
      tags:
        - article-statistics
      summary: Get all article reactions
      description: Get all article reactions.
      operationId: getArticleReactions
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Article reactions are retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleReactionsResponse'
        '400':
          description: Invalid request
        '404':
          description:
            Requested article is not found. It might be the case when current user does not
            have access to this article
  /articles-statistics/{articleId}/reaction:
    get:
      tags:
        - article-statistics
      summary: Get your own article reaction
      description: Get your own set article reaction
      operationId: getArticleReactions
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Article reaction was retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleUserArticleReactionResponse'
        '400':
          description: Invalid request
        '404':
          description:
            Requested article is not found or either reaction was not set.
            It might be the case when current user does not have access to this article
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - article-statistics
      summary: Delete your own article reaction
      description: Delete your own set article reaction. Available only if reaction was set.
      operationId: deleteArticleReactions
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Article reaction was deleted successfully
        '400':
          description: Invalid request
        '404':
          description:
            Requested article is not found. It might be the case when current user does not
            have access to this article
      security:
        - bearerAuth: [ ]
    post:
      tags:
        - article-statistics
      summary: Set article reaction
      description:
        Sets article reaction by current user. If the reaction was already set, it
        will be deleted by calling this method
      operationId: setArticleReaction
      parameters:
        - in: path
          name: articleId
          schema:
            type: integer
            format: int64
          required: true
        - in: query
          name: reactionType
          schema:
            type: integer
            format: int32
            description: Unicode code of emoji set
          required: true
      responses:
        '200':
          description: Article reaction is set successfully
        '400':
          description: Invalid request
        '404':
          description:
            Requested article is not found. It might be the case when current user does not
            have access to this article
      security:
        - bearerAuth: [ ]
  /users:
    get:
      tags:
        - users
      summary: Get info about current user
      description: Get info about current user
      operationId: getCurrentUserInfo
      responses:
        '200':
          description: User info is retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security:
        - bearerAuth: [ ]
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user info by id
      description: Get user info by id
      operationId: getUserInfoById
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: User info is retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortUserResponse'
        '400':
          description: Invalid user id
        '404':
          description: Requested user is not found
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    NewArticleRequest:
      type: object
      properties:
        title:
          type: string
          required: true
        previewImage:
          type: string
          required: false
          description: Image url
        content:
          type: string
    UpdateArticleRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        previewImage:
          type: string
          description: Image url
    UpdateArticleAccessRequest:
      type: object
      properties:
        access:
          type: string
          enum:
            - PUBLIC
            - PRIVATE
            - CUSTOM
        userIds:
          type: array
          items:
            type: string
          description: |
            If access is CUSTOM, then users that are granted access 
            should be provided
    ArticleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        previewImage:
          type: string
          description: Image url
        content:
          type: string
        creatorId:
          type: integer
          format: int64
        created:
          type: integer
          format: int64
          description: Article creation date in milliseconds from EPOCH
        updated:
          type: integer
          format: int64
          description: Article update date in milliseconds from EPOCH
    ArticlesResponse:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/ShortArticleResponse'
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
    ShortArticleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        previewImage:
          type: string
          description: Image url
        creatorId:
          type: integer
          format: int64
        created:
          type: integer
          format: int64
          description: Article creation date in milliseconds from EPOCH
        updated:
          type: integer
          format: int64
          description: Article update date in milliseconds from EPOCH
    ArticleReadProgressResponse:
      type: object
      properties:
        readProgress:
          type: integer
          format: int32
          description: Read progress in percents
        duration:
          type: integer
          format: int32
          description: Read duration in millis
    ArticleReadProgressesResponse:
      type: object
      properties:
        readProgress:
          type: integer
          format: int32
        readCount:
          type: integer
          format: int32
        readDuration:
          type: integer
          format: int32
        readProgresses:
          type: array
          items:
            $ref: '#/components/schemas/ArticleReadProgressResponse'
    ArticleReactionsResponse:
      type: object
      properties:
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/ArticleReactionResponse'
    SingleUserArticleReactionResponse:
      type: object
      properties:
        reaction:
          type: integer
          format: int32
          description: Emoji that user has reacted with
        count:
          type: integer
          format: int32
    ArticleReactionResponse:
      type: object
      properties:
        reaction:
          type: integer
          format: int32
          description: Emoji that user has reacted with
        count:
          type: integer
          format: int32
    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        avatar:
          type: string
          description: Image url
    ShortUserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        avatar:
          type: string
          description: Image url
    UpdateArticleReadProgressRequest:
      type: object
      properties:
        readProgress:
          type: integer
          format: int32
          description: Read progress in percents
        duration:
          type: integer
          format: int32
          description: Read duration in microseconds
